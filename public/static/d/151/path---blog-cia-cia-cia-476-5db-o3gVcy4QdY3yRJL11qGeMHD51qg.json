{"data":{"markdownRemark":{"html":"<h1 id=\"5-things-you-didnt-know-about-guid-in-ch\"><a href=\"#5-things-you-didnt-know-about-guid-in-ch\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5 things you didn't know about Guid in C#h</h1>\n<h2 id=\"1-guids-have-a-fixed-size\"><a href=\"#1-guids-have-a-fixed-size\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#1: Guids have a fixed size</h2>\n<p>A GUID is a 128-bit integer (16 bytes) value. That means that there are 2^128 possible values, so something like <code class=\"language-text\">340,282,366,920,938,463,463,374,607,431,768,211,456</code>. A big number, isn't it?</p>\n<p>It is virtually impossible to have duplicates, so it is safe to use it.</p>\n<p>Notice that an unsigned long is made of 64 bits: the biggest integral value that we can have has half of the bits of a GUID. The only type with the same size is decimal, but here we must consider both the sign and the precision.</p>\n<h2 id=\"2-guid-is-a-struct\"><a href=\"#2-guid-is-a-struct\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2: Guid is a struct</h2>\n<p>Just like int and short, a Guid is a struct and not an object.</p>\n<p>Its signature is this: </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> Guid <span class=\"token punctuation\">:</span> IComparable<span class=\"token punctuation\">,</span> IComparable<span class=\"token operator\">&lt;</span>Guid<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IEquatable<span class=\"token operator\">&lt;</span>Guid<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IFormattable</code></pre></div>\n<p>Since this is a value type, if we pass it to a method, it won't change its value:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> initialGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">updateGuid</span><span class=\"token punctuation\">(</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateGuid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> tmpGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttmpGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Will print</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Before: d7241bf7-2778-42a9-a2e2-99228ada8c54\nAfter: d7241bf7-2778-42a9-a2e2-99228ada8c54</code></pre></div>\n<p>But, if we use the <em>ref</em> keyword</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> initialGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">updateGuidRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AfterRef: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateGuidRef</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Guid</span> tmpGuid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\ttmpGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Will print</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Before: f93239da-4d20-4cb9-a8b7-df9002e4a042\nAfterRef: b4274547-089b-42c9-a2d1-5d4d3a62f37a</code></pre></div>\n<h2 id=\"3-you-can-create-a-guid\"><a href=\"#3-you-can-create-a-guid\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#3: You can create a Guid</h2>\n<p>For sure, the most used is <code class=\"language-text\">Guid.NewGuid()</code>. There are other ways to generate them.</p>\n<p>If you want to create an empty Guid, you can use <code class=\"language-text\">Guid.Empty</code>: it will return a Guid composed only by 0s, like <em>00000000-0000-0000-0000-000000000000</em>. Since we are talking about a struct, it doesn't make sense to have a null value, of course!</p>\n<p>If you already have a GUID stored as string, you can parse it with <code class=\"language-text\">Guid.Parse</code> and <code class=\"language-text\">Guid.TryParse</code>. Just like for DateTime and for integers, the first one works only if the input string has a valid value, the second one tries to parse a value and assign it to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> guid1 <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fc072692-d322-448b-9b1b-ba3443943579\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guid1: \"</span> <span class=\"token operator\">+</span> guid1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nGuid<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fc072692-d322-448b-9b1b-ba3443943579\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">var</span> guid2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guid2: \"</span><span class=\"token operator\">+</span>guid2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also use the simple constructor, like</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> guid <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Guid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fc072692-d322-448b-9b1b-ba3443943579\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or some of the more advanced constructor that operate at low level: for example, you can use a byte array as an input to the constructor, and have it converted to Guid.\nOf course, the array must be of 16 bytes.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> guid <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Guid</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00000000-0000-0000-0000-000000000000</span></code></pre></div>\n<h2 id=\"4-a-guid-has-multiple-formats\"><a href=\"#4-a-guid-has-multiple-formats\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#4: A Guid has multiple formats</h2>\n<p>Now that you know that a Guid is made of 16 bytes, you can think \"are the hyphens part of those bytes?\".</p>\n<p>Well, no: those are part of the default string representation of a Guid. </p>\n<p>When using the <code class=\"language-text\">ToString()</code> method you can specify the format that you want. There are different types:</p>\n<ul>\n<li><strong>N</strong>: 32 digits, without any other symbols</li>\n<li><strong>D</strong>; 32 digits, but with the hyphens. This is the default</li>\n<li><strong>B</strong>: here we have the hyphens, and the string is enclosed in braces</li>\n<li><strong>P</strong>: similar to <strong>B</strong>, but with parentheses instead of braces</li>\n<li><strong>X</strong>: here we have the hexadecimal representation of the guid.</li>\n</ul>\n<p>If we try to print the same Guid with the different formats, we can have something like</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> tmpGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"P \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>that will print</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">N</span>   e10deb88171b4c3481f705fc17d16316\n<span class=\"token class-name\">D</span>   e10deb88<span class=\"token operator\">-</span><span class=\"token number\">171</span>b<span class=\"token operator\">-</span><span class=\"token number\">4</span>c34<span class=\"token operator\">-</span><span class=\"token number\">81f</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">05f</span>c17d16316\nB   <span class=\"token punctuation\">{</span>e10deb88<span class=\"token operator\">-</span><span class=\"token number\">171</span>b<span class=\"token operator\">-</span><span class=\"token number\">4</span>c34<span class=\"token operator\">-</span><span class=\"token number\">81f</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">05f</span>c17d16316<span class=\"token punctuation\">}</span>\nP   <span class=\"token punctuation\">(</span>e10deb88<span class=\"token operator\">-</span><span class=\"token number\">171</span>b<span class=\"token operator\">-</span><span class=\"token number\">4</span>c34<span class=\"token operator\">-</span><span class=\"token number\">81f</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">05f</span>c17d16316<span class=\"token punctuation\">)</span>\nX   <span class=\"token punctuation\">{</span><span class=\"token number\">0xe10deb88</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x171b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4c34</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xf7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xfc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x17</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x16</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Do you remember the <code class=\"language-text\">Guid.Parse</code> method that I showed before? Well, there is a secret sibling! <code class=\"language-text\">Guid.ParseExact</code> converts a string into a Guid only if it has the expected format.</p>\n<p>So </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Guid<span class=\"token punctuation\">.</span><span class=\"token function\">ParseExact</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(e10deb88-171b-4c34-81f7-05fc17d16316)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>will work, but</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Guid<span class=\"token punctuation\">.</span><span class=\"token function\">ParseExact</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(e10deb88-171b-4c34-81f7-05fc17d16316)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>won't.</p>\n<h2 id=\"5-guids-have-not-a-fixed-size\"><a href=\"#5-guids-have-not-a-fixed-size\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#5: Guids have NOT a fixed size</h2>\n<p>As I said, a Guid takes 16 bytes. So it's easy to suppose that <code class=\"language-text\">sizeof(Guid)</code> will return 16.</p>\n<p>Well... no! It doesn't even compile, because <em>'Guid' does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf)</em>.</p>\n<p>That's because the size of a Guid is constant, but the memory allocated by the CLR isn't necessary constant (because for some architecture it can add a padding at the end, at the beginning or within the allocated memory).</p>\n<p>So, you can see the value in 2 ways:\nusing the <code class=\"language-text\">unsafe</code> operator</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">unsafe</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Guid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or using the <code class=\"language-text\">Marshal.SizeOf&lt;T&gt;</code> method from <code class=\"language-text\">System.Runtime.InteropServices</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Marshal<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Guid</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Both will return the correct value.</p>","fields":{"slug":"cia-cia-cia"},"frontmatter":{"title":"Cia cia cia?","date":"03.05.2020","category":"Coding","tags":["Technology","Coding"],"banner":"https://res.cloudinary.com/bellons/image/upload/v1576150144/Code4IT/TCPPING/cover_tcpping.jpg"},"timeToRead":5}},"pageContext":{"slug":"cia-cia-cia","prev":{"excerpt":"5 things you didn't know about Guid in C #1: Guids have a fixed size A GUID is a 128-bit integer (16 bytes) value. That means that there are 2^128 possible values, so something like  . A big number, isn't it? It is virtually impossible to have…","html":"<h1 id=\"5-things-you-didnt-know-about-guid-in-c\"><a href=\"#5-things-you-didnt-know-about-guid-in-c\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5 things you didn't know about Guid in C</h1>\n<h2 id=\"1-guids-have-a-fixed-size\"><a href=\"#1-guids-have-a-fixed-size\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#1: Guids have a fixed size</h2>\n<p>A GUID is a 128-bit integer (16 bytes) value. That means that there are 2^128 possible values, so something like <code class=\"language-text\">340,282,366,920,938,463,463,374,607,431,768,211,456</code>. A big number, isn't it?</p>\n<p>It is virtually impossible to have duplicates, so it is safe to use it.</p>\n<p>Notice that an unsigned long is made of 64 bits: the biggest integral value that we can have has half of the bits of a GUID. The only type with the same size is decimal, but here we must consider both the sign and the precision.</p>\n<h2 id=\"2-guid-is-a-struct\"><a href=\"#2-guid-is-a-struct\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2: Guid is a struct</h2>\n<p>Just like int and short, a Guid is a struct and not an object.</p>\n<p>Its signature is this: </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> Guid <span class=\"token punctuation\">:</span> IComparable<span class=\"token punctuation\">,</span> IComparable<span class=\"token operator\">&lt;</span>Guid<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IEquatable<span class=\"token operator\">&lt;</span>Guid<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IFormattable</code></pre></div>\n<p>Since this is a value type, if we pass it to a method, it won't change its value:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> initialGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">updateGuid</span><span class=\"token punctuation\">(</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateGuid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> tmpGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\ttmpGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Will print</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Before: d7241bf7-2778-42a9-a2e2-99228ada8c54\nAfter: d7241bf7-2778-42a9-a2e2-99228ada8c54</code></pre></div>\n<p>But, if we use the <em>ref</em> keyword</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> initialGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">updateGuidRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AfterRef: \"</span><span class=\"token operator\">+</span>initialGuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateGuidRef</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Guid</span> tmpGuid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\ttmpGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Will print</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Before: f93239da-4d20-4cb9-a8b7-df9002e4a042\nAfterRef: b4274547-089b-42c9-a2d1-5d4d3a62f37a</code></pre></div>\n<h2 id=\"3-you-can-create-a-guid\"><a href=\"#3-you-can-create-a-guid\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#3: You can create a Guid</h2>\n<p>For sure, the most used is <code class=\"language-text\">Guid.NewGuid()</code>. There are other ways to generate them.</p>\n<p>If you want to create an empty Guid, you can use <code class=\"language-text\">Guid.Empty</code>: it will return a Guid composed only by 0s, like <em>00000000-0000-0000-0000-000000000000</em>. Since we are talking about a struct, it doesn't make sense to have a null value, of course!</p>\n<p>If you already have a GUID stored as string, you can parse it with <code class=\"language-text\">Guid.Parse</code> and <code class=\"language-text\">Guid.TryParse</code>. Just like for DateTime and for integers, the first one works only if the input string has a valid value, the second one tries to parse a value and assign it to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> guid1 <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fc072692-d322-448b-9b1b-ba3443943579\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guid1: \"</span> <span class=\"token operator\">+</span> guid1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nGuid<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fc072692-d322-448b-9b1b-ba3443943579\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">var</span> guid2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guid2: \"</span><span class=\"token operator\">+</span>guid2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also use the simple constructor, like</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> guid <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Guid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fc072692-d322-448b-9b1b-ba3443943579\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or some of the more advanced constructor that operate at low level: for example, you can use a byte array as an input to the constructor, and have it converted to Guid.\nOf course, the array must be of 16 bytes.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> guid <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Guid</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00000000-0000-0000-0000-000000000000</span></code></pre></div>\n<h2 id=\"4-a-guid-has-multiple-formats\"><a href=\"#4-a-guid-has-multiple-formats\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#4: A Guid has multiple formats</h2>\n<p>Now that you know that a Guid is made of 16 bytes, you can think \"are the hyphens part of those bytes?\".</p>\n<p>Well, no: those are part of the default string representation of a Guid. </p>\n<p>When using the <code class=\"language-text\">ToString()</code> method you can specify the format that you want. There are different types:</p>\n<ul>\n<li><strong>N</strong>: 32 digits, without any other symbols</li>\n<li><strong>D</strong>; 32 digits, but with the hyphens. This is the default</li>\n<li><strong>B</strong>: here we have the hyphens, and the string is enclosed in braces</li>\n<li><strong>P</strong>: similar to <strong>B</strong>, but with parentheses instead of braces</li>\n<li><strong>X</strong>: here we have the hexadecimal representation of the guid.</li>\n</ul>\n<p>If we try to print the same Guid with the different formats, we can have something like</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> tmpGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"P \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X \\t\"</span><span class=\"token operator\">+</span>tmpGuid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>that will print</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">N</span>   e10deb88171b4c3481f705fc17d16316\n<span class=\"token class-name\">D</span>   e10deb88<span class=\"token operator\">-</span><span class=\"token number\">171</span>b<span class=\"token operator\">-</span><span class=\"token number\">4</span>c34<span class=\"token operator\">-</span><span class=\"token number\">81f</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">05f</span>c17d16316\nB   <span class=\"token punctuation\">{</span>e10deb88<span class=\"token operator\">-</span><span class=\"token number\">171</span>b<span class=\"token operator\">-</span><span class=\"token number\">4</span>c34<span class=\"token operator\">-</span><span class=\"token number\">81f</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">05f</span>c17d16316<span class=\"token punctuation\">}</span>\nP   <span class=\"token punctuation\">(</span>e10deb88<span class=\"token operator\">-</span><span class=\"token number\">171</span>b<span class=\"token operator\">-</span><span class=\"token number\">4</span>c34<span class=\"token operator\">-</span><span class=\"token number\">81f</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">05f</span>c17d16316<span class=\"token punctuation\">)</span>\nX   <span class=\"token punctuation\">{</span><span class=\"token number\">0xe10deb88</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x171b</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4c34</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xf7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xfc</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x17</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x16</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Do you remember the <code class=\"language-text\">Guid.Parse</code> method that I showed before? Well, there is a secret sibling! <code class=\"language-text\">Guid.ParseExact</code> converts a string into a Guid only if it has the expected format.</p>\n<p>So </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Guid<span class=\"token punctuation\">.</span><span class=\"token function\">ParseExact</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(e10deb88-171b-4c34-81f7-05fc17d16316)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>will work, but</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Guid<span class=\"token punctuation\">.</span><span class=\"token function\">ParseExact</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(e10deb88-171b-4c34-81f7-05fc17d16316)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>won't.</p>\n<h2 id=\"5-guids-have-not-a-fixed-size\"><a href=\"#5-guids-have-not-a-fixed-size\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#5: Guids have NOT a fixed size</h2>\n<p>As I said, a Guid takes 16 bytes. So it's easy to suppose that <code class=\"language-text\">sizeof(Guid)</code> will return 16.</p>\n<p>Well... no! It doesn't even compile, because <em>'Guid' does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf)</em>.</p>\n<p>That's because the size of a Guid is constant, but the memory allocated by the CLR isn't necessary constant (because for some architecture it can add a padding at the end, at the beginning or within the allocated memory).</p>\n<p>So, you can see the value in 2 ways:\nusing the <code class=\"language-text\">unsafe</code> operator</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">unsafe</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Guid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or using the <code class=\"language-text\">Marshal.SizeOf&lt;T&gt;</code> method from <code class=\"language-text\">System.Runtime.InteropServices</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Marshal<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Guid</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Both will return the correct value.</p>","id":"0a1b634d-58e3-5b3a-ada5-f62cf96b2447","fields":{"slug":"coding-is-fun-isnt-it"},"frontmatter":{"date":"2018-01-05","title":"Coding is fun, isn't it?","category":"Coding","tags":["Technology","Coding"],"banner":"https://res.cloudinary.com/bellons/image/upload/v1576150144/Code4IT/TCPPING/cover_tcpping.jpg"},"timeToRead":5},"next":null}}